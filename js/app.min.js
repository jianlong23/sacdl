var Utils=function(){var n;return{getData:function(e){n=e},getBarData:function(){var e=n.children,a={labels:[],series:[]},t=[];return e.forEach(function(n){a.labels.push(n.name),t.push(n.children.length)}),a.series.push({label:"Projects count",values:t}),a},getStackData:function(){var e=n.children,a={name:"repos",languages:[]};return e.forEach(function(n){if("null"!==n.name){var e={language:n.name,count:n.children.length};a.languages.push(e)}}),[a]},getTreeData:function(){return n}}}();
var Searcher=function(){function t(){o.q=r.property("value")||"bitcoin";var t=[];for(var n in o)t.push(n+"="+o[n]);return s=e+"?"+t.join("&"),console.log(s),i.text("当前搜索地址: "+s),s}var e,r,n,i,s="",c=[],o={q:"bitcoin",sort:"forks",order:"desc",per_page:100};return{settings:{baseApiUrl:"https://api.github.com/search/repositories"},init:function(){r=d3.select("#search-input"),n=d3.select("#search-btn"),i=d3.select("#search-msg"),e=this.settings.baseApiUrl,n.on("click",function(){t(),c.forEach(function(t){try{t(s)}catch(e){console.log(e)}})})},addListener:function(t){c.push(t)}}}();
var Bar=function(){function t(t){for(var e=0;e<t.labels.length;e++)for(var r=0;r<t.series.length;r++)u.push(t.series[r].values[e])}function e(){u=[],a=Utils.getBarData(),i=l*a.series.length,t(a);var e=d3.scale.category20(),r=l*u.length+c*a.labels.length,g=d3.scale.linear().domain([0,d3.max(u)]).range([0,s]),h=d3.scale.linear().range([r+c,0]);n=d3.svg.axis().scale(h).tickFormat("").tickSize(0).orient("left");var f=chart.attr("width",o+s+d).attr("height",r),p=f.selectAll("g").data(u,function(t,e){return[t,e]}),x=p.enter().append("g").attr("transform",function(t,e){return"translate("+o+","+(e*l+c*(.5+Math.floor(e/a.series.length)))+")"});x.append("rect").attr("fill",function(t,r){return e(r%a.series.length)}).attr("class","bar").attr("width",g).attr("height",l-1),x.append("text").attr("x",function(t){return g(t)-3}).attr("y",l/2).attr("fill","red").attr("dy",".35em").text(function(t){return t}),x.append("text").attr("class","label").attr("x",function(t){return-10}).attr("y",i/2).attr("dy",".35em").text(function(t,e){return e%a.series.length===0?a.labels[Math.floor(e/a.series.length)]:""}),p.exit().transition().style({opacity:0}).remove(),f.append("g").attr("class","y axis").attr("transform","translate("+o+", "+-c/2+")").call(n);var b=18,v=4,y=f.selectAll(".legend").data(a.series),m=y.enter().append("g").attr("transform",function(t,e){var r=b+v,a=-c/2,n=o+s+40-b,l=e*r-a;return"translate("+n+","+l+")"});m.append("rect").attr("width",b).attr("height",b).style("fill",function(t,r){return e(r)}).style("stroke",function(t,r){return e(r)}),m.append("text").attr("class","legend").attr("x",b+v).attr("y",b-v).text(function(t){return t.label}),y.exit().remove()}var r,a,n,s=300,l=20,i=0,c=10,o=150,d=150,u=[];return{settings:{title:"barTitle",desc:"barDesc",barId:"#barId"},init:function(){r=this.settings.barId,d3.select("#barTitle").text(this.settings.title),d3.select("#barDesc").text(this.settings.desc),chart=d3.select(r).append("svg").attr("class","chart")},show:function(){e()}}}();
var Treemap=function(){function t(t){p=f=Utils.getTreeData(t);var a=i.nodes(f).filter(function(t){return!t.children}),s=c.selectAll("g").data(a,function(t){return t.watchers_count}).enter().append("g").attr("class","cell").attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).on("click",function(t){return r(p==t.parent?f:t.parent)});s.append("rect").attr("width",function(t){return t.dx-1}).attr("height",function(t){return t.dy-1}).style("fill",function(t){return d(t.parent.name)}),s.append("text").attr("x",function(t){return 2*t.dx/3+20}).attr("y",function(t){return t.dy/2}).attr("dy",".35em").attr("text-anchor","middle").text(function(t){return t.name}).style("opacity",function(t){return t.w=this.getComputedTextLength(),1}),c.selectAll("g").data(a).exit().transition().style({opacity:0}).remove(),d3.select(window).on("click",function(){r(f)}),d3.select("#treemapSelect").on("change",function(){i.value("watchers"==this.value?e:n).nodes(f),r(p)})}function e(t){return t.watchers_count}function n(t){return t.forks_count}function r(t){var e=s/t.dx,n=o/t.dy;u.domain([t.x,t.x+t.dx]),l.domain([t.y,t.y+t.dy]);var r=c.selectAll("g.cell").transition().duration(d3.event.altKey?7500:750).attr("transform",function(t){return"translate("+u(t.x)+","+l(t.y)+")"});r.select("rect").attr("width",function(t){return e*t.dx-1}).attr("height",function(t){return n*t.dy-1}),r.select("text").attr("x",function(t){return 2*e*t.dx/3+20}).attr("y",function(t){return n*t.dy/2}).style("opacity",function(t){return 1}),p=t,d3.event.stopPropagation()}var a,i,c,s=970,o=500,u=d3.scale.linear().range([0,s]),l=d3.scale.linear().range([0,o]),d=d3.scale.category20c(),f=[],p=[];return{settings:{title:"treemapTitle",desc:"treemapDesc",treemapId:"#treemapId"},init:function(){var t=this.settings.treemapId;d3.select("#treemapTitle").text(this.settings.title),d3.select("#treemapDesc").text(this.settings.desc),a=d3.select(t).append("div").attr("class","chart").style("width",s+"px").style("height",o+"px"),c=a.append("svg").attr("width",s).attr("height",o).append("g").attr("transform","translate(.5,.5)"),i=d3.layout.treemap().size([s,o]).value(function(t){return t.watchers_count})},show:function(e){t(e)}}}();
!function(){function e(e){var a=setTimeout(function(){t.style.display="block"},300);e=e||"http://localhost:3000/search",d3.json(e,function(e,i){e&&(clearTimeout(a),t.style.display="none",alert("加载数据失败，请检查您的网络设置。")),Utils.getData(i),Bar.show(),Treemap.show(),clearTimeout(a),t.style.display="none"})}var t=document.getElementById("modal");Searcher.init(),Bar.settings={title:"Top100 BarChart",desc:"This is a good example.",barId:"#barId"},Bar.init(),Treemap.settings={title:"Top100 treemap",desc:"You can click the block to zoom it.",treemapId:"#sacdlTreemap"},Treemap.init(),Searcher.addListener(function(t){e(t)}),e()}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
